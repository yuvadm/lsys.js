{
  "name": "lsys",
  "version": "0.1.5",
  "description": "L-Systems implementation in JavaScript.",
  "main": "index.js",
  "author": "",
  "keywords": [
    "lsystem",
    "fractal",
    "turtle"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/tatarize/lsys.js.git"
  },
  "engines": {
    "node": "*"
  },
  "readme": "L-Systems.JS\n============\n\nA complete, 3D L-Systems implementation in JavaScript. Generates trees by\nproduction rules and draws by converting to cartesian coordinates.\n\nUsage\n-----\n\n```js\nvar lsys = new LSystem('F', { 'F' : 'F-F+FF' }).iterate(2);\nvar tree = lsys.print();\nconsole.log(tree);  // F-F+FF-F-F+FF+F-F+FFF-F+FF\nvar coords = lsys.draw(Math.PI / 2);  // draw tree with alpha as 90 degrees\nconsole.log(coords);  // [[0,0,0], [0,1,0], [1,1,0], ...\n```\n\nDefinition\n------\n\nAn L-system is a formal grammar defined as an initial axiom string, and a set\nof production rules. In the aforementioned example, `F` is the initial axiom,\nand only one production rule exists: `F -> F-F+FF`. The grammar alphabet is\nassumed to be all characters with a production rule mapping.\n\nSyntax\n------\n\n - `F`: draw and move one unit vector forward\n - `+`/`-`: turn right / left\n - `&`/`^`: pitch up / down\n - `<`/`>`: roll right / left\n - `|`: reverse vector direction\n - `[`/`]`: push / pop current tree state\n\nMore\n----\n\nFor more info and examples, check out http://yuvadm.github.com/lsys.js\n",
  "readmeFilename": "README.md",
  "_id": "lsys@0.1.5",
  "_from": "lsys@0.1.5",
  "dist": {
    "shasum": "ce12dd716d9f4b462df44a5562a7a2a2560341f0"
  },
  "_resolved": "https://registry.npmjs.org/lsys/-/lsys-0.1.5.tgz"
}
